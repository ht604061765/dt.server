<?xml version="1.0" encoding="UTF-8"?>
<!--scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
<!--scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
<!--debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="false" debug="true">
    <!--contextName 就是上下文的名字，没什么作用-->
    <contextName>dt</contextName>

    <!--读取服务名称，用于动态路径-->
    <springProperty scope="context" name="application.name" source="spring.application.name"/>

    <!--property 定义属性，上下文可以进行引用，不用重复写-->
    <property name="PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{10}:%msg%n"/>
    <property name="LOCATION" value="/opt/og-server/log/${application.name}"/>

    <!--这个是本地测试用的-->
<!--    <property name="WIN-LOCATION" value="C://Users//260530//Desktop//log//og-server//${application.name}"/>-->

    <!--本地开发环境（只打印到控制台）-->
    <springProfile name="dev">
        <!--输出到控制台-->
        <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>
                    ${PATTERN}
                </pattern>
            </layout>
            <encoder>
                <pattern>${PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>
        </appender>

        <!--控制日志输出-->
        <root level="info">
            <appender-ref ref="console"/>
        </root>
    </springProfile>

    <!--测试环境（打印到控制台，且输出info日志）-->
    <springProfile name="pre">
        <!--输出到控制台-->
        <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>
                    ${PATTERN}
                </pattern>
            </layout>
            <encoder>
                <pattern>${PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>
        </appender>

        <!--输出 INFO 信息到文件-->
        <appender name="fileInfo" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOCATION}/info/info_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
                <maxFileSize>15MB</maxFileSize>
                <maxHistory>10</maxHistory>
                <totalSizeCap>5GB</totalSizeCap>
            </rollingPolicy>
            <encoder>
                <pattern>${PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>
        </appender>

        <!--输出ERROR信息到ERROR文件-->
        <appender name="fileError" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOCATION}/error/error_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
                <maxFileSize>15MB</maxFileSize>
                <maxHistory>10</maxHistory>
                <totalSizeCap>5GB</totalSizeCap>
            </rollingPolicy>
            <encoder>
                <pattern>${PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>

            <!-- 此日志文件只记录 error 级别的 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <!--过滤 Error-->
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>

        <!-- 异步输出 -->
        <appender name="ASYNC-INFO" class="ch.qos.logback.classic.AsyncAppender">
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACE、DEBUG、INFO级别的日志 -->
            <discardingThreshold>0</discardingThreshold>
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
            <queueSize>256</queueSize>
            <!-- 添加附加的appender,最多只能添加一个 -->
            <appender-ref ref="fileInfo"/>
        </appender>

        <appender name="ASYNC-ERROR" class="ch.qos.logback.classic.AsyncAppender">
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACE、DEBUG、INFO级别的日志 -->
            <discardingThreshold>0</discardingThreshold>
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
            <queueSize>256</queueSize>
            <!-- 添加附加的appender,最多只能添加一个 -->
            <appender-ref ref="fileError"/>
        </appender>

        <!--控制日志输出-->
        <root level="info">
            <appender-ref ref="console"/>
            <appender-ref ref="fileInfo"/>
            <appender-ref ref="fileError"/>
        </root>
    </springProfile>

    <!--生产环境（不打印控制台，全部输出到文件）-->
    <springProfile name="prod">
        <!--输出 INFO 信息到文件-->
        <appender name="fileInfo" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOCATION}/info/info_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
                <maxFileSize>15MB</maxFileSize>
                <maxHistory>10</maxHistory>
                <totalSizeCap>5GB</totalSizeCap>
            </rollingPolicy>
            <encoder>
                <pattern>${PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>
        </appender>

        <!--输出ERROR信息到ERROR文件-->
        <appender name="fileError" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOCATION}/error/error_%d{yyyy-MM-dd}_%i.log</fileNamePattern>
                <maxFileSize>15MB</maxFileSize>
                <maxHistory>10</maxHistory>
                <totalSizeCap>5GB</totalSizeCap>
            </rollingPolicy>
            <encoder>
                <pattern>${PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>

            <!-- 此日志文件只记录 error 级别的 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <!--过滤 Error-->
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>
        <!-- 异步输出 -->
        <appender name="ASYNC-INFO" class="ch.qos.logback.classic.AsyncAppender">
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACE、DEBUG、INFO级别的日志 -->
            <discardingThreshold>0</discardingThreshold>
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
            <queueSize>256</queueSize>
            <!-- 添加附加的appender,最多只能添加一个 -->
            <appender-ref ref="fileInfo"/>
        </appender>

        <appender name="ASYNC-ERROR" class="ch.qos.logback.classic.AsyncAppender">
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACE、DEBUG、INFO级别的日志 -->
            <discardingThreshold>0</discardingThreshold>
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
            <queueSize>256</queueSize>
            <!-- 添加附加的appender,最多只能添加一个 -->
            <appender-ref ref="fileError"/>
        </appender>
        <!--输出到控制台-->
        <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>
                    ${PATTERN}
                </pattern>
            </layout>
            <encoder>
                <pattern>${PATTERN}</pattern>
                <charset>utf-8</charset>
            </encoder>
        </appender>
        <!--控制日志输出-->
        <root level="info">
            <appender-ref ref="fileInfo"/>
            <appender-ref ref="fileError"/>
        </root>
    </springProfile>

</configuration>